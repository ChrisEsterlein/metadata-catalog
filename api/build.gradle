buildscript {
  ext {
    springBootVersion = '1.5.3.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'groovy'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

ext {
  springCloudVersion = 'Dalston.RELEASE'
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.10'
  compile('org.springframework.cloud:spring-cloud-starter-eureka')
  compile('org.springframework.cloud:spring-cloud-starter')
  compile('org.springframework.cloud:spring-cloud-starter-zuul')
  compile('org.springframework.boot:spring-boot-starter-web')

  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-4'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-4'
  testCompile 'io.rest-assured:rest-assured:3.0.2'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

configurations.configure {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integrationTest/groovy')
    //resources.srcDir file('src/integrationTest/resources')
    compileClasspath += main.output + test.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
//  integrationStorage {
//    resources {
//      srcDir '../storage/src/resources'
//    }
//  }
//  integrationIndex {
//    resources {
//      srcDir '../index/src/resources'
//    }
//  }
}

//task copyFromStorage(type:Copy) {
//  from 'src/resources/docker'
//  into "$buildDir"
//}

task copyCql(type:Copy, description: 'Copies cql to build for use in docker-compose wait.', group: 'docker') {
  from '../storage/src/resources/cql'
  into "$buildDir/cql"
}


task buildDockerTemplates(type:Copy, description: 'Copies docker files and scripts, substituting properties for consistency.', group: 'docker'
) {
  dependsOn copyCql
  from 'src/resources/docker'
  from '../index/src/resources/docker'
  from '../storage/src/resources/docker'
  into "$buildDir"
  exclude "template_Dockerfile"
  exclude "template_docker-compose.yml"
  rename { fileName ->
    "${(fileName - 'template_')}" // strips the first instance of 'template_' from the filename using subtraction
  }
//  expand(network: "$network",
//      rabbit_service_name: "$rabbit_service_name",
//      rabbit_port: "$rabbit_port",
//      rabbit_admin_port: "$rabbit_admin_port")

//  application_service_name: "garbage",
//  application_port: "0000",
//  image: "bad",
//  jar_dir: "junk",
//  jar: "morejunk",

  expand(network: "$network",
      storage_jar: "${rootProject.childProjects.storage.name}-${project.version}.jar",
      index_jar: "${rootProject.childProjects.index.name}-${project.version}.jar",
      cassandra_port: "$cassandra_port",
      cassandra_service_name: "$cassandra_service_name",
      cassandra_initialization_service_name: "$cassandra_initialization_service_name",
      storage_service_name: "$storage_service_name",
      storage_port: "$storage_port",
      rabbit_service_name: "$rabbit_service_name",
      rabbit_port: "$rabbit_port",
      rabbit_admin_port: "$rabbit_admin_port",
      elasticsearch_service_name: "$elasticsearch_service_name",
      elasticsearch_rest_port: "$elasticsearch_rest_port",
      elasticsearch_node_port: "$elasticsearch_node_port",
      index_port: "$index_port",
      index_service_name: "$index_service_name",
      index_image: "ncei/${rootProject.name}-${rootProject.childProjects.index.name}:${project.version}",
      storage_image: "ncei/${rootProject.name}-${rootProject.childProjects.storage.name}:${project.version}")
}


// TODO fix descriptions
task dockerComposeUpShared(type: Exec, description: 'Starts the system using docker-compose.', group: 'docker') {
  dependsOn buildDockerTemplates
  executable "bash"
  args "-c", "docker-compose -f $buildDir/docker-compose-shared.yml -p ${project.name} up -d"
}
task dockerComposeUpIndex(type: Exec, description: 'Starts the system using docker-compose.', group: 'docker') {
  dependsOn buildDockerTemplates
  executable "bash"
  args "-c", "docker-compose -f $buildDir/docker-compose-index.yml -p ${project.name} up -d"
}
task dockerComposeUpStorage(type: Exec, description: 'Starts the system using docker-compose.', group: 'docker') {
  dependsOn buildDockerTemplates
  executable "bash"
  args "-c", "docker-compose -f $buildDir/docker-compose-storage.yml -p ${project.name} up -d"
}

task dockerComposeUp(description: 'Starts the system using docker-compose.', group: 'docker') {
  dependsOn dockerComposeUpShared
  dependsOn dockerComposeUpIndex
  dependsOn dockerComposeUpStorage
}

task dockerComposeDownShared(type: Exec, description: 'Stops the system using docker-compose.', group: 'docker') {
  executable "bash"
  args "-c", "docker-compose -f $buildDir/docker-compose-shared.yml -p ${project.name} down || true"
}
task dockerComposeDownIndex(type: Exec, description: 'Stops the system using docker-compose.', group: 'docker') {
  executable "bash"
  args "-c", "docker-compose -f $buildDir/docker-compose-index.yml -p ${project.name} down || true"
}
task dockerComposeDownStorage(type: Exec, description: 'Stops the system using docker-compose.', group: 'docker') {
  executable "bash"
  args "-c", "docker-compose -f $buildDir/docker-compose-storage.yml -p ${project.name} down || true"
}
task dockerComposeDown(description: 'Stops the system using docker-compose.', group: 'docker') {
  dependsOn dockerComposeDownShared
  dependsOn dockerComposeDownIndex
  dependsOn dockerComposeDownStorage
}

task waitForStorage(
    type:Exec,
    description: 'Waits for storage to be available.',
    group: 'docker',
) {
  dependsOn dockerComposeUp
  executable "bash"
  args "-c", "docker run \
    --network ${project.name}_$network \
    --rm willwill/wait-for-it \
    -h storage \
    -p 8080 -t 60"
}

task waitForIndex(
    type:Exec,
    description: 'Waits for index to be available.',
    group: 'docker',
) {
  dependsOn dockerComposeUp
  executable "bash"
  args "-c", "docker run \
    --network ${project.name}_$network \
    --rm willwill/wait-for-it \
    -h index \
    -p 8080 -t 60"
}

task integrationTest(
    type: Test,
    description: 'Runs the integration tests',
    group: 'verification',
) {
  mustRunAfter test
  dependsOn waitForStorage
  dependsOn waitForIndex
  finalizedBy dockerComposeDown

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.junitXml.destination = 'build/integration-test-results'
  reports.html.destination = 'build/reports/integrationTests'
}

check.dependsOn integrationTest