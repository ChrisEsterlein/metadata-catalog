buildscript {
  ext {
    springBootVersion = '1.5.2.RELEASE'
  }
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply from: "${rootDir}/gradle/publishing.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven { url "http://repo.spring.io/release" }
  maven { url 'https://repo.spring.io/milestone' }
  maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.10'
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-amqp'
  compile 'org.springframework.boot:spring-boot-starter-tomcat'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.elasticsearch.client:rest:5.4.0'

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-4'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-4'
  testCompile 'io.rest-assured:rest-assured:3.0.2'
  testCompile 'net.bytebuddy:byte-buddy:1.6.14'
  testCompile 'org.elasticsearch:elasticsearch:5.4.0'
}

task buildDockerTemplates(type: Copy, description: 'Copies docker files and scripts, substituting properties for consistency.', group: 'docker') {
  from 'src/resources/docker'
  into "$buildDir"
  rename { fileName ->
    "${(fileName - 'template_')}" // strips the first instance of 'template_' from the filename using subtraction
  }
  expand(network: "$network",
      elasticsearch_service_name: "$elasticsearch_service_name",
      elasticsearch_rest_port: "$elasticsearch_rest_port",
      elasticsearch_node_port: "$elasticsearch_node_port",
      rabbit_service_name: "$rabbit_service_name",
      rabbit_port: "$rabbit_port",
      rabbit_admin_port: "$rabbit_admin_port",
      jar_dir: 'libs',
      jar: "${project.name}-${project.version}.jar",
      image: "ciresncei/${rootProject.name}-${project.name}:${project.version}")
}

static def getDateTime() {
  return new Date().format("YYYY-MM-DD'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))
}

task dockerImage(type: Exec, description: 'Creates a docker image with the current jar.', group: 'docker') {
  dependsOn buildDockerTemplates
  dependsOn bootRepackage
  executable "bash"
  args "-c", "docker build --no-cache \
    --label ncei.${rootProject.name}-version=${project.version} \
    --label ncei.${rootProject.name}-build-date=" + getDateTime() + " \
    --label ncei.${rootProject.name}-name=${project.name}Module \
    --label ncei.${rootProject.name}-vendor=NCEI \
    -t ciresncei/${rootProject.name}-${project.name}:${project.version} ${buildDir}"
}

assemble.dependsOn dockerImage

configurations.configure {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integrationTest/groovy')
    //resources.srcDir file('src/integrationTest/resources')
    compileClasspath += main.output + test.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
}

task dockerComposeUp(type: Exec, description: 'Starts the system using docker-compose.', group: 'docker') {
  dependsOn buildDockerTemplates
  executable "bash"
  args "-c", "docker-compose -f $buildDir/docker-compose.yml -p ${project.name} up -d"
}

task dockerComposeDown(type: Exec, description: 'Stops the system using docker-compose.', group: 'docker') {
  executable "bash"
  args "-c", "docker-compose -f $buildDir/docker-compose.yml -p ${project.name} down || true"
}

task waitForCompose(type: Exec, description: 'Waits for elasticsearch to be available.', group: 'docker') {
  dependsOn dockerComposeUp
  executable "bash"
  args "-c", "docker run \
    --network ${project.name}_$network \
    --rm willwill/wait-for-it \
    -h $elasticsearch_service_name \
    -p $elasticsearch_rest_port -t 60"
}

task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
  mustRunAfter test
  dependsOn waitForCompose
  finalizedBy dockerComposeDown

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.junitXml.destination = 'build/integration-test-results'
  reports.html.destination = 'build/reports/integrationTests'
}

check.dependsOn integrationTest

ext {
  bintrayUser = System.getenv('DOCKER_USER')
  bintrayKey = System.getenv('DOCKER_PASSWORD')
}

task publishImage(type: Exec, description: 'Publishes the docker image', group: 'publish') {
  dependsOn "dockerImage"
  executable "bash"
  args "-c", "docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD && docker push ciresncei/${rootProject.name}-${project.name}:${project.version} && docker logout"
}

task promote(type: Exec, description: 'Publishes the promoted docker image', group: 'publish') {
  executable "bash"
  args "-c", "docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD && \
    docker tag ciresncei/${rootProject.name}-${project.name}:${project.version} ciresncei/${rootProject.name}-${project.name}:$baseVersion && \
    docker tag ciresncei/${rootProject.name}-${project.name}:${project.version} ciresncei/${rootProject.name}-${project.name} &&\
    docker push ciresncei/${rootProject.name}-${project.name}:$baseVersion &&\
    ciresncei/${rootProject.name}-${project.name} && \
    docker logout"
}

publishing {
  publications {
    main(MavenPublication) {
      artifact jar

      groupId 'edu.colorado.cires.metadata-catalog'
      artifactId "${rootProject.name}-${project.name}"
      version "${project.version}"
    }
  }
}
