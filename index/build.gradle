buildscript {
  ext {
    springBootVersion = '1.5.2.RELEASE'
  }
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven { url "http://repo.spring.io/release" }
  maven { url 'https://repo.spring.io/milestone' }
  maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.10'
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-amqp'
  compile 'org.springframework.boot:spring-boot-starter-tomcat'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.elasticsearch.client:rest:5.4.0'

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-4'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-4'
  testCompile 'io.rest-assured:rest-assured:3.0.2'
}

project.ext.set("applicationContainerName", "${project.name}App")
project.ext.set("elasticsearchContainerName", "${project.name}Elasticsearch")
project.ext.set("rabbitContainerName", "${project.name}Rabbit")

task dockerFile(type: Copy, description: 'Generates the Dockerfile.', group: 'docker') {
  from 'src/templates'
  into "$buildDir"
  include 'Dockerfile.template'
  rename { file -> 'Dockerfile' }
  expand(jar: "${project.name}-${project.version}.jar")
}

static def getDateTime() {
  return new Date().format("YYYY-MM-DD'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))
}

task dockerImage(type: Exec, description: 'Creates a docker image with the current jar.', group: 'docker') {
  dependsOn dockerFile
  dependsOn bootRepackage
  executable "bash"
  args "-c", "docker build --no-cache \
    --label ncei.${rootProject.name}-version=${project.version} \
    --label ncei.${rootProject.name}-build-date=${getDateTime()} \
    --label ncei.${rootProject.name}-name=${project.ext.applicationContainerName} \
    --label ncei.${rootProject.name}-vendor=NCEI \
    -t ncei/${rootProject.name}-${project.name}:${project.version} ${buildDir}"
}

task cleanDockerComposeYml(type: Delete, description: 'Remove generated docker-compose.yml.', group: 'docker') {
  delete "${buildDir}/docker-compose.yml"
}

task dockerComposeYml(type: Copy, description: 'Generates docker-compose.yml.', group: 'docker') {
  dependsOn cleanDockerComposeYml
  from 'src/templates'
  into "$buildDir"
  include 'docker-compose.yml.template'
  rename { file -> 'docker-compose.yml' }
  expand(network: "net", image: "ncei/${rootProject.name}-${project.name}:${project.version}")
}

task dockerNetwork(type: Exec, description: 'Creates a network in docker.', group: 'docker') {
  executable "bash"
  args "-c", "docker network create ${project.name}_net || true"
}

task removeDockerNetwork(type: Exec, description: 'Removes docker network.', group: 'docker') {
  executable "bash"
  args "-c", "docker network rm ${project.name}_net || true"
}

assemble.dependsOn dockerImage
assemble.dependsOn dockerComposeYml

task dockerRun(type: Exec, description: 'Runs the application in a docker container.', group: 'docker') {
  dependsOn dockerNetwork
  executable "bash"
  // sets the environment variable elasticsearch_host to override application.yml
  // sets the environment variable rabbitmq_connectionfactory_host to override application.yml
  args "-c", "docker run -d \
    --network ${project.name}_net \
    -e rabbitmq_connectionfactory_host=rabbitmq \
    -e elasticsearch_host=index.elasticsearch \
    --publish 8088:8088 \
    --name ${project.ext.applicationContainerName} \
    ncei/${rootProject.name}-${project.name}:${project.version}"
}

task dockerRemove(type: Exec, description: 'Removes the application container.', group: 'docker') {
  finalizedBy removeDockerNetwork
  executable "bash"
  args "-c", "docker rm -f ${project.ext.applicationContainerName} || true"
}

task startElasticsearchContainer(type: Exec, description: 'Starts the Elasticsearch container.', group: 'docker') {
  dependsOn dockerNetwork
  executable "bash"
  args "-c", "docker rm -f ${project.ext.elasticsearchContainerName} || true  && \
    docker run -d \
    --network ${project.name}_net \
    --net-alias index.elasticsearch \
    --publish 9300:9300 \
    --publish 9200:9200 \
    --name ${project.ext.elasticsearchContainerName} \
    elasticsearch:2.4.0"
}

task removeElasticsearchContainer(type: Exec, description: 'Cleans up the Elasticsearch container.', group: 'docker') {
  finalizedBy removeDockerNetwork
  executable "bash"
  args "-c", "docker rm -f ${project.ext.elasticsearchContainerName} || true"
}

task startRabbitContainer(type: Exec, description: 'Starts the Rabbit container.', group: 'docker') {
  dependsOn dockerNetwork
  executable "bash"
  args "-c", "docker rm -f ${project.ext.rabbitContainerName} || true  && \
    docker run -d \
    --network ${project.name}_net \
    --net-alias rabbitmq \
    --publish 5672:5672 \
    --publish 15672:15672 \
    --name ${project.ext.rabbitContainerName} \
    rabbitmq:latest"
}

task waitForRabbit(type: Exec, description: 'Waits for Rabbit to be available.', group: 'docker') {
  dependsOn startRabbitContainer
  executable "bash"
  args "-c", "docker run \
    --network ${project.name}_net \
    --rm willwill/wait-for-it \
    -h \$(docker inspect --format='{{ .NetworkSettings.Networks.${project.name}_net.IPAddress }}' ${project.ext.rabbitContainerName}) \
    -p 5672 -t 30"
}

task bootstrapRabbit(type: Exec, description: 'Initializes Rabbit container.', group: 'docker') {
  dependsOn waitForRabbit
  executable "bash"
  args "-c", "docker exec ${project.ext.rabbitContainerName} rabbitmq-plugins enable rabbitmq_management"
}

task removeRabbitContainer(type: Exec, description: 'Cleans up the Rabbit container.', group: 'docker') {
  finalizedBy removeDockerNetwork
  executable "bash"
  args "-c", "docker rm -f ${project.ext.rabbitContainerName} || true"
}

task dockerComposeUp(type: Exec, description: 'Starts the system using docker-compose.', group: 'docker') {
  dependsOn dockerComposeYml
  executable "bash"
  args "-c", "docker-compose -f ${buildDir}/docker-compose.yml -p ${project.name} up -d"
}

task dockerComposeDown(type: Exec, description: 'Stops the system using docker-compose.', group: 'docker') {
  executable "bash"
  args "-c", "docker-compose -f ${buildDir}/docker-compose.yml -p ${project.name} down || true"
}

clean.dependsOn removeRabbitContainer
clean.dependsOn removeElasticsearchContainer
clean.dependsOn dockerRemove
clean.dependsOn dockerComposeDown
clean.dependsOn removeDockerNetwork

task dockerBootrun(description: 'Rebuilds and runs the application in a docker container.', group: 'docker') {
  dependsOn removeDockerNetwork
  dependsOn dockerRemove
  dependsOn dockerImage
  dependsOn startElasticsearchContainer
  dependsOn bootstrapRabbit
  dependsOn dockerRun
}

configurations.configure {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integrationTest/groovy')
    //resources.srcDir file('src/integrationTest/resources')
    compileClasspath += main.output + test.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
}

task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
  mustRunAfter test
  dependsOn startElasticsearchContainer
  dependsOn bootstrapRabbit
  finalizedBy removeRabbitContainer
  finalizedBy removeElasticsearchContainer

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.junitXml.destination = 'build/integration-test-results'
  reports.html.destination = 'build/reports/integrationTests'
}

check.dependsOn integrationTest
