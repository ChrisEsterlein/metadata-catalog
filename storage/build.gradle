buildscript{
  ext{
    springBootVersion = '1.5.2.RELEASE'
  }
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
  }
  dependencies{
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven { url "http://repo.spring.io/release" }
  maven { url 'https://repo.spring.io/milestone' }
  maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.10'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-aop'
  compile 'org.springframework.boot:spring-boot-starter-data-cassandra'
  compile 'org.springframework.boot:spring-boot-starter-tomcat'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.retry:spring-retry'

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-4'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-4'
  testCompile 'io.rest-assured:rest-assured:3.0.2'
}
project.ext.set("cassandraContainerName", "${project.name}Cassandra")
project.ext.set("applicationContainerName", "${project.name}App")

task dockerFile(type: Copy, description: 'Generates the Dockerfile.', group: 'docker') {
  from 'src/templates'
  into "$buildDir"
  include 'Dockerfile.template'
  rename { file -> 'Dockerfile' }
  expand(jar: "${project.name}-${project.version}.jar")
}

task dockerImage(type: Exec, description: 'Creates a docker image with the current jar.', group: 'docker') {
  dependsOn dockerFile
  dependsOn bootRepackage
  executable "sh"
  args "-c", "docker build -t ncei/${rootProject.name}-${project.name}:${project.version} ${buildDir}"
}

assemble.dependsOn dockerImage

task dockerRun(type: Exec, description: 'Runs the application in a docker container.', group: 'docker') {
  executable "sh"
  // sets the environment variable cassandra_contactPoints to override application.yml
  args "-c", "docker run -d -e cassandra_contactPoints=\$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' ${project.ext.cassandraContainerName}) --name ${project.ext.applicationContainerName} ncei/${rootProject.name}-${project.name}:${project.version}"
}

task dockerRemove(type:Exec, description: 'Removes the application container.', group: 'docker') {
  executable "sh"
  args "-c", "docker rm -f ${project.ext.applicationContainerName} || true"
}

task startCassandraContainer(type:Exec, description: 'Starts the Cassandra container.', group: 'docker') {
  executable "sh"
  args "-c", "docker rm -f ${project.ext.cassandraContainerName} || true  && docker run -d --publish 9042:9042 --name ${project.ext.cassandraContainerName} cassandra"
}

task waitForCassandra(type:Exec, description: 'Waits for Cassandra to be available.', group: 'docker') {
  dependsOn startCassandraContainer
  executable "sh"
  args "-c", "docker run --rm willwill/wait-for-it -h \$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' ${project.ext.cassandraContainerName}) -p 9042 -t 30"
}

task bootstrapCassandra(type:Exec, description: 'Initializes the keyspace and tables in the Cassandra container.', group: 'docker') {
  dependsOn waitForCassandra
  executable "sh"
  args "-c", "docker exec -i ${project.ext.cassandraContainerName} cqlsh <<< \"\$(cat cql/createKeyspaceAndTables.cql)\""
}

task removeCassandraContainer(type:Exec, description: 'Cleans up the Cassandra container.', group: 'docker') {
  executable "sh"
  args "-c", "docker rm -f ${project.ext.cassandraContainerName} || true"
}

clean.dependsOn removeCassandraContainer
clean.dependsOn dockerRemove

task dockerBootrun(description: 'Rebuilds and runs the application in a docker container.', group: 'docker') {
  dependsOn dockerRemove
  dependsOn dockerImage
  dependsOn bootstrapCassandra
  dependsOn dockerRun
}

configurations.configure {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integrationTest/groovy')
    //resources.srcDir file('src/integrationTest/resources')
    compileClasspath += main.output + test.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
}

task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
  mustRunAfter test
  dependsOn bootstrapCassandra
  finalizedBy removeCassandraContainer

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.junitXml.destination = 'build/integration-test-results'
  reports.html.destination = 'build/reports/integrationTests'
}

check.dependsOn integrationTest
