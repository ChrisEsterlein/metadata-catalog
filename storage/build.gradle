buildscript {
  ext {
    springBootVersion = '1.5.4.RELEASE'
  }
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply from: "${rootDir}/gradle/publishing.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven { url "http://repo.spring.io/release" }
  maven { url 'https://repo.spring.io/milestone' }
  maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.10'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-amqp'
  compile 'org.springframework.boot:spring-boot-starter-aop'
  compile 'org.springframework.boot:spring-boot-starter-data-cassandra'
  compile 'org.springframework.boot:spring-boot-starter-tomcat'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.retry:spring-retry'

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-4'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-4'
  testCompile 'io.rest-assured:rest-assured:3.0.2'
  testCompile 'cglib:cglib-nodep:2.2'       // For mocking classes
//  testCompile 'org.objenesis:objenesis:1.2' // For mocking final classes
}

static def getDateTime() {
  return new Date().format("YYYY-MM-DD'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))
}

task dockerImage(type: Exec, description: 'Creates a docker image with the current jar.', group: 'docker') {
  dependsOn bootRepackage
  executable "bash"
  args "-c", "docker build --no-cache \
    --build-arg NAME=${project.name} \
    --build-arg VERSION=${project.version} \
    --build-arg DATE=" + getDateTime() + " \
    -t cedardevs/${rootProject.name}-${project.name}:${project.version} ."
}

assemble.dependsOn dockerImage

configurations.configure {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integrationTest/groovy')
    //resources.srcDir file('src/integrationTest/resources')
    compileClasspath += main.output + test.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
}

task dockerComposeUp(type: Exec, description: 'Starts the system using docker-compose.', group: 'docker') {
  executable "bash"
  args "-c", "docker-compose -f docker-compose.yml -p ${project.name} up -d"
}

task dockerComposeDown(type: Exec, description: 'Stops the system using docker-compose.', group: 'docker') {
  executable "bash"
  args "-c", "docker-compose -f docker-compose.yml -p ${project.name} down || true"
}

//task waitForCompose(type: Exec, description: 'Waits for Cassandra to be available.', group: 'docker') {
//  dependsOn dockerComposeUp
//  executable "bash"
//  args "-c", "docker wait ${project.name}_${cassandra_service_name}_1"
//}

task waitForCassandra(
    type: Exec,
    description: 'Waits for cassandra to be available.',
    group: 'docker',
) {
  dependsOn dockerComposeUp
  executable "bash"
  args "-c", "docker run \
    --network ${project.name}_net \
    --rm willwill/wait-for-it \
    -h cassandra -p 9042 -t 90"
}

task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
  mustRunAfter test
  dependsOn waitForCassandra
  finalizedBy dockerComposeDown
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.junitXml.destination = 'build/integration-test-results'
  reports.html.destination = 'build/reports/integrationTests'
}

check.dependsOn integrationTest

task publishImage(type: Exec, description: 'Publishes the docker image', group: 'publish') {
  dependsOn "dockerImage"
  executable "bash"
  args "-c", "docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD && docker push cedardevs/${rootProject.name}-${project.name}:${project.version} && docker logout"
}

task promote(type: Exec, description: 'Publishes the promoted docker image', group: 'publish') {
  executable "bash"
  args "-c", "docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD && \
    docker tag cedardevs/${rootProject.name}-${project.name}:${project.version} cedardevs/${rootProject.name}-${project.name}:$baseVersion && \
    docker tag cedardevs/${rootProject.name}-${project.name}:${project.version} cedardevs/${rootProject.name}-${project.name}:latest &&\
    docker push cedardevs/${rootProject.name}-${project.name}:$baseVersion &&\
    docker push cedardevs/${rootProject.name}-${project.name}:latest && \
    docker logout"
}

publishing {
  publications {
    main(MavenPublication) {
      artifact jar

      groupId 'org.cedar.metadata'
      artifactId "${rootProject.name}-${project.name}"
      version "${project.version}"
    }
  }
}
