
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0'
  }
}

apply from: "${rootDir}/gradle/publishing.gradle"

task cleanDockerImages(type: Exec, description: 'Clean up dangling docker images.', group: 'docker') {
  executable "sh"
  args "-c", "docker rmi \$(docker images -aq --filter dangling=true) || true"

  // to clean up all our custom images:
  //docker rmi \$(docker images -aq --filter "label=ncei.metadata-catalog-vendor")
}

clean.dependsOn cleanDockerImages

task debugDockerLogs(type: Exec, description: 'Print the docker logs before removing the containers.', group: 'docker') {
  executable "bash"
  args "-c", "docker ps -aq | xargs -n 1 docker logs || true"
}

task buildDeploymentDockerTemplates(
    type: Copy,
    description: 'Copies docker files and scripts, substituting properties for consistency.',
    group: 'docker'
) {
  from 'resources/docker'
  into "$buildDir"
  rename { fileName ->
    "${(fileName - 'template_')}" // strips the first instance of 'template_' from the filename using subtraction
  }

  expand(
      cassandra_service_name: "$cassandra_service_name",
      cassandra_initialization_service_name: "$cassandra_initialization_service_name",
      storage_service_name: "$storage_service_name",
      storage_port: "$storage_port",
      rabbit_service_name: "$rabbit_service_name",
      rabbit_admin_port: "$rabbit_admin_port",
      elasticsearch_service_name: "$elasticsearch_service_name",
      index_port: "$index_port",
      index_service_name: "$index_service_name",
      api_service_name: "$api_service_name",
      api_port: "$api_port",
      index_image: "ciresncei/${rootProject.name}-${rootProject.childProjects.index.name}:${project.version}",
      storage_image: "ciresncei/${rootProject.name}-${rootProject.childProjects.storage.name}:${project.version}",
      api_image: "ciresncei/${rootProject.name}-${rootProject.childProjects.api.name}:${project.version}",
      cassandra_image: "ciresncei/${rootProject.name}-cassandra-init:${project.version}"
    )
}

task buildDeployment() {
  dependsOn 'api:dockerImage', 'index:dockerImage', 'storage:dockerImage', buildDeploymentDockerTemplates
}

publishing {
  publications {
    main(MavenPublication) {
      artifact "${buildDir}/docker-compose.yml"

      groupId 'edu.colorado.cires.metadata-catalog'
      artifactId "${rootProject.name}"
      version "${project.version}"
    }
  }
}

artifactoryPublish.dependsOn buildDeployment
